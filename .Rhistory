install.packages("igraph")
install.packages("igraphdata")
install.packages("markdown")
---
title: "Berechnung und Visualisierung von Netzwerkmaßen (WS1920)"
---
# Erstellung eines igraph-Netzwerks und Berechnung/Visualisierung der zentralen Netzwerkmaße
```{r Erstellung Beispiel-Netzwerk CR/PR n=38}
library(igraph)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
---
title: "Berechnung und Visualisierung von Netzwerkmaßen (WS1920)"
---
# Erstellung eines igraph-Netzwerks und Berechnung/Visualisierung der zentralen Netzwerkmaße
```{r Erstellung Beispiel-Netzwerk CR/PR n=38}
library(igraph)
el <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr/edges.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr/nodes.csv", header=T, as.is=T, sep = ",")
edgematrix <-as.matrix(el)
s <- graph_from_data_frame(d=edgematrix, vertices=nodes, directed=T)
library(igraphdata)
install.packages("igraphdata")
install.packages("igraphdata")
# Erstellung eines igraph-Netzwerks und Berechnung/Visualisierung der zentralen Netzwerkmaße
```{r Erstellung Beispiel-Netzwerk CR/PR n=38}
library(igraph)
el <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr/edges.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr/nodes.csv", header=T, as.is=T, sep = ",")
edgematrix <-as.matrix(el)
s <- graph_from_data_frame(d=edgematrix, vertices=nodes, directed=T)
s
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraphdata)
library(knitr)
library(rmarkdown)
library(igraph)
library(igraphdata)
library(knitr)
library(rmarkdown)
edges <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/
data/crpr/edges.csv", header=T, as.is=T)
nodes <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/
data/crpr/nodes.csv", header=T, as.is=T)
edgematrix <-as.matrix(edges)
plot(s)
---
title: "Berechnung und Visualisierung von Netzwerkmaßen (WS1920)"
---
# Erstellung eines igraph-Netzwerks und Berechnung/Visualisierung der zentralen Netzwerkmaße
```{r Erstellung Beispiel-Netzwerk CR/PR n=38}
library(igraph)
el <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr/edges.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr/nodes.csv", header=T, as.is=T, sep = ",")
edgematrix <-as.matrix(el)
s <- graph_from_data_frame(d=edgematrix, vertices=nodes, directed=T)
s
```
```{r Pro-Tipp: Vertex-Labels wieder anzeigen lassen}
# Labels wiederherstellen
V(s)$label <- V(s)$name
# setzt die Pfeilspitze dauerhaft auf den Wert .2
E(s)$arrow.size <- 0.2
plot(s,
edge.curved=0.2,
edge.color="black",
layout=layout_with_kk,
main="Beispielnetzwerk CR/PR",
sub="mit IDs der Knoten")
```
```{r Netzwerkattribute auslesen}
# Auflistung der Edge- und Nodeattribute
list.edge.attributes(s)
list.vertex.attributes(s)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# Auswahl spezifischer Attribute
edge.attributes(s)$relation
vertex.attributes(s)$sex
```
```{r Kapitel 3: Netzwerk mit subgraph.edges unterteilen}
help <- subgraph.edges(s, E(s)[relation == 1])
help
plot(help, main="help")
work <- subgraph.edges(s, E(s)[relation == 2])
work
plot(work, main="work")
# definiert, dass 2 Abbildungen in einer Zeile stehen
par(mfrow=c(1,2), mar=c(0,0,2,1))
plot(help,
layout=layout_with_kk,
edge.color="red",
edge.curved=.2,
edge.curved=curve_multiple(help),
main="Ratsuche-Netzwerk",
sub="n=38, KK-Algorithmus")
plot(work,
layout=layout_with_kk,
edge.color="blue",
edge.curved=.2,
edge.curved=curve_multiple(work),
main="Projekt-Netzwerk",
sub="n=38, KK-Algorithmus")
# setzt die Abbildungen wieder zurück
par(mfrow=c(1,2), mar=c(0,0,2,1))
```
```{r Berechnung Netzwerkmaße für das Ratsuche Netzwerk}
# Generelle Werte
is_connected(help)
components(help)
edge_density(help)
mean_distance(help)
reciprocity(help)
# Spezifische Maße (Pfaddistanzen)
diameter(help)
get_diameter(help)
farthest_vertices(help)
```
```{r Aufgabe: Berechnen Sie die Netzwerkmaße für work}
# Generelle Werte
is_connected()
components()
edge_density()
mean_distance()
reciprocity()
# Spezifische Maße (Pfaddistanzen)
diameter()
get_diameter()
farthest_vertices()
```
```{r Unterteilung eines Netzwerks }
# unterteilt das Netzwerk in das Hilfsnetzwerk h1 mit einem Gewicht von 1
h1 <- subgraph.edges(help, E(help)[weight == 1])
# analog dazu das Hilfsnetzwerk mit einem Gewicht von 3
h3 <- subgraph.edges(help, E(help)[weight == 3])
# Vergleich der beiden Netzwerke
h1
h3
# definiert, dass 3 plots in einer Zeile stehen
par(mfrow=c(1,3), mar=c(0,0,2,2))
plot(help,
layout=layout_with_kk,
edge.color="red",
edge.curved=.2,
edge.width=E(help)$weight,
edge.curved=curve_multiple(help),
main="Ratsuche-Netzwerk \n gesamt",
sub="n=38, KK-Algorithmus")
plot(h3,
layout=layout_with_kk,
edge.color="red",
edge.width=E(h3)$weight,
main="Ratsuche-Netzwerk \n (Gewicht 3)",
sub="n=38, Beziehungsstärke 3 (Gewicht), erste Nennung")
plot(h1, layout=layout_with_kk,
main="Ratsuche-Netzwerk \n (Gewicht 1)",
edge.color="red",
edge.width=E(h1)$weight,
edge.weight=3,
sub="n=38, Beziehungsstärke 1 (Gewicht), zweite Nennung")
```
```{r Berechnung Zentralitätsmaße im Ratsuche-Netzwerk}
help
help_deg <- degree(help, normalized = TRUE)
help_indeg <- degree(help, mode="in", normalized = TRUE)
help_between <- betweenness(help, V(help), directed=TRUE, normalized=TRUE)
help_closeness <- closeness(help, vids = V(help), mode="all", normalized=TRUE)
# Ausgabe der normalisierten Werte
help_deg
help_indeg
help_between
help_closeness
which.max(help_deg)
which.max(help_indeg)
which.max(help_between)
which.max(help_closeness)
```
```{r Visualisierung der positionalen Maße }
par(mfrow=c(2,2), mar=c(0,0,2,1))
plot(help,
vertex.size=help_deg*150,
layout=layout_with_kk,
vertex.label=NA,
main="Degree allgemein")
plot(help,
vertex.size=help_indeg*150,
layout=layout_with_kk,
vertex.label=NA,
main="Indegree")
# Auflistung der Edge- und Nodeattribute
list.edge.attributes(s)
setwd("~/GitHub/PreTest")
